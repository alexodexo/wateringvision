#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = "Opa";
const char* password = "OmaundOpa";
const char* mqtt_server = "wateringvision.de"; 
const int mqtt_port = 1883;
const char* clientname = "berlin";

const int sensorPin = 34;

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  
  // Konvertiere die eingehende Nachricht in einen String
  String msg = "";
  for (int i = 0; i < length; i++) {
    msg += (char)message[i];
  }
  Serial.println(msg);

  // Lies den Sensorwert
  int sensorValue = analogRead(34);
  // Konvertiere den Sensorwert in einen String
  char sensorMessage[8];
  itoa(sensorValue, sensorMessage, 10);

  // Veröffentliche die Nachricht auf "berlin/setSensor"
  if (client.publish("berlin/setSensor", sensorMessage)) {
    Serial.println("Sensorwert erfolgreich veröffentlicht!");
  } else {
    Serial.println("Fehler beim Veröffentlichen des Sensorwerts.");
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect(clientname)) {
      Serial.println("Connected to MQTT broker");
      client.subscribe("/berlin/getSensor"); // Subscribe to a topic
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
